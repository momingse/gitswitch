// Code generated by MockGen. DO NOT EDIT.
// Source: add.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/cmd/add.go -package=mocks -source=add.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
	isgomock struct{}
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDBService) Add(alias, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", alias, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDBServiceMockRecorder) Add(alias, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDBService)(nil).Add), alias, path)
}

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
	isgomock struct{}
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// CheckIfPathExists mocks base method.
func (m *MockFileService) CheckIfPathExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPathExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfPathExists indicates an expected call of CheckIfPathExists.
func (mr *MockFileServiceMockRecorder) CheckIfPathExists(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPathExists", reflect.TypeOf((*MockFileService)(nil).CheckIfPathExists), path)
}

// GetCurrentPath mocks base method.
func (m *MockFileService) GetCurrentPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPath indicates an expected call of GetCurrentPath.
func (mr *MockFileServiceMockRecorder) GetCurrentPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPath", reflect.TypeOf((*MockFileService)(nil).GetCurrentPath))
}

// GetParentFolderName mocks base method.
func (m *MockFileService) GetParentFolderName(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentFolderName", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParentFolderName indicates an expected call of GetParentFolderName.
func (mr *MockFileServiceMockRecorder) GetParentFolderName(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentFolderName", reflect.TypeOf((*MockFileService)(nil).GetParentFolderName), path)
}
